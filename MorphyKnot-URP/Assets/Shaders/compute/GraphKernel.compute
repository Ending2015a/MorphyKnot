// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Graph

#define THREADS 8
#define PI 3.1415926535

struct Particle
{
    float3 position;
    float4 color;
};

RWStructuredBuffer<Particle> _Particles;
uint _ResolutionX, _ResolutionY;
float _Time;
float _Scale;
float3 _Min, _Max;
float3 _PaletteA, _PaletteB, _PaletteC, _PaletteD;

inline float3 pqKnot(float u, float v, float t, float p, float q)
{
    float3 o;
    o.x = cos(q * PI * u) * (2 + cos(p * PI * u));
    o.y = sin(p * PI * u);
    o.z = sin(q * PI * u) * (2 + cos(p * PI * u));
    float r = length(o);
    float r1 = 0.75;
    float r2 = 0.25;
    float s = r1 + r2/r * cos(PI * v);
    o.x *= s;
    o.y *= 0.5 + r2 * sin(PI * v);
    o.z *= s;
    return o;
}

inline float3 palette(in float t)
{
    // inigo quilez's palette
    _PaletteD.y += 0.05 *_Time;
    return _PaletteA + _PaletteB * cos(6.28318 * (_PaletteC * t + _PaletteD));
}

[numthreads(THREADS, THREADS, 1)]
void Graph(uint3 id : SV_DispatchThreadID)
{
    if (id.x < _ResolutionX && id.y < _ResolutionY)
    {
        float2 scale = 2.0 / float2(_ResolutionX, _ResolutionY);
        float2 uv = (id.xy + 0.5) * scale - 1.0;
        Particle p;
        float3 pos;
        float4 color;

        float phase = sin(_Time * PI * 0.1) * 3.5 + 3.5;

        float3 pos1 = pqKnot(uv.x, uv.y, _Time, floor(phase), 2);
        float3 pos2 = pqKnot(uv.x, uv.y, _Time, ceil(phase), 2);

        p.position = lerp(pos1, pos2, smoothstep(0.0, 1.0, frac(phase)));
        p.color = float4(palette(uv.x + 0.2 * _Time), 1.0);
        _Particles[id.x + id.y * _ResolutionX] = p;
    }
}